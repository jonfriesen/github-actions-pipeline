name: release
on:
  create:
    tags:
    - 'v*.*.*'

jobs:

  release:
    name: Release
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Validate GoReleaser
      uses: goreleaser/goreleaser-action@v1
      with:
        version: latest
        args: check

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v1
      with:
        version: latest
        args: release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Note: this action creates the upload_url and formatted_tag outputs used below
    - name: Get Release by Tag
      id: get_release_by_tag
      uses: jonfriesen/get-release-by-tag@v0.0.11
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
    
    - name: Build Windows Installer
      uses: ./.github/actions/windows-installer
      env:
        TAG_NAME: ${{ steps.get_release_by_tag.outputs.formatted_tag }}

    - name: Sign Windows Installer
      uses: ./.github/actions/windows-signer
      env:
        NAME: GoPipeline
        DOMAIN: https://github.com/jonfriesen/github-actions-pipeline
        BINARY: dist/GoPipelineSetup.exe
        WINDOWS_CERT: ${{ secrets.WINDOWS_CERT }}
        WINDOWS_KEY: ${{ secrets.WINDOWS_KEY }}
        
    - run: ls -la dist/

    - name: Build MacOS Installer
      uses: ./.github/actions/mac-installer

#     Release Windows binaries and installers to S3 & GitHub
    - name: Release Windows Installer to GitHub
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: dist/GoPipelineSetup.exe
        asset_name: GoPipelineSetup.exe
        asset_content_type: application/zip

    - name: Release Windows Installer to S3
      uses: jonfriesen/s3-put-action@v0.0.1
      with:
        args: --acl-public
      env:
        LOCAL_FILE: dist/GoPipelineSetup.exe
        REMOTE_FILE: downloads/${{ steps.get_release_by_tag.outputs.formatted_tag }}/windows/GoPipelineSetup.exe
        AWS_ENDPOINT: ${{ secrets.AWS_ENDPOINT }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Release Windows Zip to S3
      uses: jonfriesen/s3-put-action@v0.0.1
      with:
        args: --acl-public
      env:
        LOCAL_FILE: dist/go-pipeline-${{ steps.get_release_by_tag.outputs.formatted_tag }}-windows-64-bit.zip
        REMOTE_FILE: downloads/${{ steps.get_release_by_tag.outputs.formatted_tag }}/windows/go-pipeline.zip
        AWS_ENDPOINT: ${{ secrets.AWS_ENDPOINT }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#     Release macOS binaries and installers to S3 and GitHub
    - name: Release MacOS Installer to GitHub
      id: upload-release-asset-macos
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_by_tag.outputs.upload_url }}
        asset_path: dist/GoPipeline.pkg
        asset_name: GoPipeline.pkg
        asset_content_type: application/zip
        
    - name: Release MacOS Installer to S3
      uses: jonfriesen/s3-put-action@v0.0.1
      with:
        args: --acl-public
      env:
        LOCAL_FILE: dist/GoPipeline.pkg
        REMOTE_FILE: downloads/${{ steps.get_release_by_tag.outputs.formatted_tag }}/macos/GoPipeline.pkg
        AWS_ENDPOINT: ${{ secrets.AWS_ENDPOINT }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Release MacOS Tar to S3
      uses: jonfriesen/s3-put-action@v0.0.1
      with:
        args: --acl-public
      env:
        LOCAL_FILE: dist/go-pipeline-${{ steps.get_release_by_tag.outputs.formatted_tag }}-macOS-64-bit.tar.gz
        REMOTE_FILE: downloads/${{ steps.get_release_by_tag.outputs.formatted_tag }}/macos/go-pipeline.tar.gz
        AWS_ENDPOINT: ${{ secrets.AWS_ENDPOINT }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#     Release Linux binaries and installers to S3
    - name: Release Linux deb to S3
      uses: jonfriesen/s3-put-action@v0.0.1
      with:
        args: --acl-public
      env:
        LOCAL_FILE: dist/go-pipeline-${{ steps.get_release_by_tag.outputs.formatted_tag }}-linux-64-bit.deb
        REMOTE_FILE: downloads/${{ steps.get_release_by_tag.outputs.formatted_tag }}/linux/go-pipeline.deb
        AWS_ENDPOINT: ${{ secrets.AWS_ENDPOINT }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Release Linux rpm to S3
      uses: jonfriesen/s3-put-action@v0.0.1
      with:
        args: --acl-public
      env:
        LOCAL_FILE: dist/go-pipeline-${{ steps.get_release_by_tag.outputs.formatted_tag }}-linux-64-bit.rpm
        REMOTE_FILE: downloads/${{ steps.get_release_by_tag.outputs.formatted_tag }}/linux/go-pipeline.rpm
        AWS_ENDPOINT: ${{ secrets.AWS_ENDPOINT }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Release Linux tar to S3
      uses: jonfriesen/s3-put-action@v0.0.1
      with:
        args: --acl-public
      env:
        LOCAL_FILE: dist/go-pipeline-${{ steps.get_release_by_tag.outputs.formatted_tag }}-linux-64-bit.tar.gz
        REMOTE_FILE: downloads/${{ steps.get_release_by_tag.outputs.formatted_tag }}/linux/go-pipeline.tar.gz
        AWS_ENDPOINT: ${{ secrets.AWS_ENDPOINT }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}